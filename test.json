{
    "files": {
        "main.py": "from modbus import read_modbus_data\nfrom wifi import connect_to_internet, process_ap_mode\nfrom mqtt import connect_to_mqtt\nimport machine, time, json\n\nbutton_pin = 26\n\nclient = None\ntopic = \"AIDHOOSTATION\"\n\nwatchdog = machine.WDT(timeout = 60000)\n#----------------------AP MODE BUTTON2 ------------------------------\ndef button_pressed(pin):\n    print(\"Button Pressed! Entering AP Mode\")\n    process_ap_mode()\n\n# Wifi button Interrupt\nbutton = machine.Pin(button_pin, machine.Pin.IN, machine.Pin.PULL_UP)\nbutton.irq(trigger=machine.Pin.IRQ_FALLING, handler=button_pressed)\n\n#----------------------RAIN CODE ------------------------------\nrain_bucket_pin = 21\ncount = 0\nlast_rain_time = 0  # Keep track of the last time rain was detected\nlast_reset_date = None  # Store the last reset date\nreset_interval = 15 * 60 * 1000 #30 mins in milliseconds\n\ndef save_count_to_file():\n    data = {\"count\": count}\n    with open(\"rain_count.json\", \"w\") as file:\n        json.dump(data, file)\n        \ndef reset_daily_count(timer):\n    global count, last_reset_date\n    current_date = time.localtime()[2]  # Day of the month\n    if last_reset_date is None or last_reset_date != current_date:\n        count = 0\n        last_reset_date = current_date\n        print(\"Daily count reset.\")\n        save_count_to_file()\n\ndef rain_input(pin):\n    global count, last_rain_time\n    current_time = time.ticks_ms()  # Get current time in milliseconds\n    if current_time - last_rain_time > 1500:  # Debounce by checking time difference\n        count += 1\n        last_rain_time = current_time\n        print(f\"Rain detected. Current count is: {count}\")\n        save_count_to_file()\n\n# Configure pin 21 as an input with an interrupt for rain detection\nrain_bucket = machine.Pin(rain_bucket_pin, machine.Pin.IN, machine.Pin.PULL_UP)\nrain_bucket.irq(trigger=machine.Pin.IRQ_RISING, handler=rain_input)\n\n# Create a timer to reset the count every 30 minutes\nreset_timer = machine.Timer(-1)\nreset_timer.init(period=reset_interval, mode=machine.Timer.PERIODIC, callback=reset_daily_count)\n\nwhile True:\n    try:\n        connect_to_internet()\n        watchdog.feed()\n        if connect_to_internet():\n            if client is None:\n                client = connect_to_mqtt()\n            client.check_msg()\n        else:\n            client = None\n            time.sleep(15)\n            machine.reset()\n        sensor_data = read_modbus_data()\n        message = json.dumps(sensor_data)\n        client.publish(topic, message)\n        time.sleep(10)\n        \n    except KeyboardInterrupt:\n        print('KeyboardInterrupt, stopping RTU client...')\n        break\n    except Exception as e:\n        print('Exception during execution: {}'.format(e))"
    }
}
