{
    "files": {
        "main.py": "from modbus import read_modbus_data\nfrom wifi import connect_to_internet, process_ap_mode\nfrom mqtt import connect_to_mqtt\nimport machine, time, json\n\nbutton_pin = 26\nclient = None\ntopic = \"AIDHOOSTATION\"\nwatchdog = machine.WDT(timeout = 60000)\n\n# Add restart timer variables\nRESTART_INTERVAL = 60 * 60 * 1000  # 1 hour in milliseconds\nlast_restart_time = time.ticks_ms()  # Track last restart time\n\n#----------------------AP MODE BUTTON ------------------------------\ndef button_pressed(pin):\n    print(\"Button Pressed! Entering AP Mode\")\n    process_ap_mode()\n\nbutton = machine.Pin(button_pin, machine.Pin.IN, machine.Pin.PULL_UP)\nbutton.irq(trigger=machine.Pin.IRQ_FALLING, handler=button_pressed)\n\n#----------------------RAIN CODE ------------------------------\nrain_bucket_pin = 21\ncount = 0\nlast_rain_time = 0\nlast_reset_date = None\nreset_interval = 15 * 60 * 1000  # 15 mins in milliseconds\n\ndef load_count_from_file():\n    global count\n    try:\n        with open(\"rain_count.json\", \"r\") as file:\n            data = json.load(file)\n            count = data.get(\"count\", 0)\n            print(f\"Loaded rain count: {count}\")\n    except:\n        print(\"No previous rain count file found, starting with 0\")\n        count = 0\n\ndef save_count_to_file():\n    data = {\"count\": count}\n    with open(\"rain_count.json\", \"w\") as file:\n        json.dump(data, file)\n\ndef reset_daily_count(timer):\n    global count, last_reset_date\n    current_date = time.localtime()[2]\n    if last_reset_date is None or last_reset_date != current_date:\n        count = 0\n        last_reset_date = current_date\n        print(\"Daily count reset.\")\n        save_count_to_file()\n\ndef rain_input(pin):\n    global count, last_rain_time\n    current_time = time.ticks_ms()\n    if current_time - last_rain_time > 1500:\n        count += 1\n        last_rain_time = current_time\n        print(f\"Rain detected. Current count is: {count}\")\n        save_count_to_file()\n\nrain_bucket = machine.Pin(rain_bucket_pin, machine.Pin.IN, machine.Pin.PULL_UP)\nrain_bucket.irq(trigger=machine.Pin.IRQ_RISING, handler=rain_input)\n\nload_count_from_file()\n\nreset_timer = machine.Timer(-1)\nreset_timer.init(period=reset_interval, mode=machine.Timer.PERIODIC, callback=reset_daily_count)\n\nwhile True:\n    try:\n        current_time = time.ticks_ms()\n        if time.ticks_diff(current_time, last_restart_time) >= RESTART_INTERVAL:\n            save_count_to_file()\n            machine.reset()\n\n        connect_to_internet()\n        watchdog.feed()\n        if connect_to_internet():\n            if client is None:\n                client = connect_to_mqtt()\n            client.check_msg()\n        else:\n            client = None\n            time.sleep(15)\n            machine.reset()\n        sensor_data = read_modbus_data()\n        message = json.dumps(sensor_data)\n        client.publish(topic, message)\n        time.sleep(10)\n    except KeyboardInterrupt:\n        print('KeyboardInterrupt, stopping RTU client...')\n        break\n    except Exception as e:\n        print('Exception during execution: {}'.format(e))"
    }
}
